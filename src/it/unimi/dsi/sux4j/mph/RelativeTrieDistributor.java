package it.unimi.dsi.sux4j.mph;

/*		 
 * Sux4J: Succinct data structures for Java
 *
 * Copyright (C) 2008 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU Lesser General Public License as published by the Free
 *  Software Foundation; either version 2.1 of the License, or (at your option)
 *  any later version.
 *
 *  This library is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 *  for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 */

import it.unimi.dsi.Util;
import it.unimi.dsi.bits.BitVector;
import it.unimi.dsi.bits.Fast;
import it.unimi.dsi.bits.LongArrayBitVector;
import it.unimi.dsi.bits.TransformationStrategies;
import it.unimi.dsi.bits.TransformationStrategy;
import it.unimi.dsi.fastutil.ints.IntArrayList;
import it.unimi.dsi.fastutil.longs.LongArrayList;
import it.unimi.dsi.fastutil.objects.AbstractObject2LongFunction;
import it.unimi.dsi.fastutil.objects.Object2LongFunction;
import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;
import it.unimi.dsi.fastutil.objects.ObjectArrayList;
import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
import it.unimi.dsi.fastutil.objects.ObjectRBTreeSet;
import it.unimi.dsi.lang.MutableString;
import it.unimi.dsi.sux4j.bits.Rank9;
import it.unimi.dsi.util.LongBigList;

import java.io.File;
import java.io.IOException;
import java.util.Iterator;

import org.apache.log4j.Logger;

/** A distributor based on a probabilistic trie.
 * 
 */

public class RelativeTrieDistributor<T> extends AbstractObject2LongFunction<T> {
	private final static Logger LOGGER = Util.getLogger( RelativeTrieDistributor.class );
	private static final long serialVersionUID = 1L;
	private static final boolean DEBUG = false;
	private static final boolean DDEBUG = false;
	private static final boolean ASSERTS = true;

	/** An integer representing the exit-on-the-left behaviour. */
	private final static int LEFT = 0;
	/** An integer representing the exit-on-the-right behaviour. */
	private final static int RIGHT = 1;
	/** A ranking structure on the vector containing leaves plus p0,p1, etc. */
	private final Rank9 leaves;
	/** The transformation used to map object to bit vectors. */
	private final TransformationStrategy<? super T> transformationStrategy;
	/** For each external node and each possible path, the related behaviour. */
	private final MWHCFunction<BitVector> behaviour;
	/** The number of (internal and external) nodes of the trie. */
	private final int size;
	/** A debug function used to store explicitly {@link #behaviour}. */
	private final Object2LongFunction<BitVector> externalTestFunction;
	private MWHCFunction<BitVector> signatures;
	private int w;
	private LcpMonotoneMinimalPerfectHashFunction<BitVector> ranker;
	private long logWMask;
	private int logW;
	private Object2LongOpenHashMap<BitVector> mistakes;
	private int logLogW;
	private long logLogWMask;
	private int numDelimiters;
	
	/** An intermediate class containing the compacted trie generated by the delimiters. */
	private final static class IntermediateTrie<T> {
		/** A debug function used to store explicitly the internal behaviour. */
		private Object2LongFunction<BitVector> externalTestFunction;
		/** The root of the trie. */
		protected final Node root;
		/** The number of overall elements to distribute. */
		private final int numElements;
		/** The number of internal nodes of the trie. */
		protected final int size;
		/** The values associated to the keys in {@link #externalKeysFile}. */
		private LongBigList externalValues;
		/** The string representing the parent of each key in {@link #externalKeysFile}. */
		private IntArrayList externalParentRepresentations;
		private int w;
		private int logW;
		private int logLogW;
		private long logLogWMask;
		private long logWMask;
		private ObjectArrayList<LongArrayBitVector> internalNodeKeys;
		private ObjectArrayList<LongArrayBitVector> internalNodeRepresentations;
		private LongArrayList internalNodeSignatures;
		private ObjectOpenHashSet<BitVector> delimiters;
		
		/** A node in the trie. */
		private static class Node {
			/** Left child. */
			private Node left;
			/** Right child. */
			private Node right;
			/** The path compacted in this node (<code>null</code> if there is no compaction at this node). */
			private final LongArrayBitVector path;
			/** The index of this node in breadth-first order. */
			private int index;

			/** Creates a node. 
			 * 
			 * @param left the left child.
			 * @param right the right child.
			 * @param path the path compacted at this node.
			 */
			public Node( final Node left, final Node right, final LongArrayBitVector path ) {
				this.left = left;
				this.right = right;
				this.path = path;
			}

			/** Returns true if this node is a leaf.
			 * 
			 * @return true if this node is a leaf.
			 */
			public boolean isLeaf() {
				return right == null && left == null;
			}
			
			public String toString() {
				return "[" + path + "]";
			}
		}
			
		void labelIntermediateTrie( Node node, LongArrayBitVector path,ObjectArrayList<LongArrayBitVector> representations, ObjectArrayList<LongArrayBitVector>keys, LongArrayList values ) {
			assert ( node.left != null ) == ( node.right != null );
			if ( node.left != null ) {

				long parentPathLength = path.length() - 1;
				
				path.append( node.path );

				labelIntermediateTrie( node.left, path.append( 0, 1 ), representations, keys, values );
				path.remove( (int)( path.length() - 1 ) );

				long[] h = new long[ 3 ];
				Hashes.jenkins( path, 0, h );

				int p = w / 2;
				int j = w / 4;
				while( p <= parentPathLength || p > path.length() ) {
					if ( p <= parentPathLength ) p += j;
					else p -= j;

					j /= 2;
				}

				assert p <= path.length();
				assert p > parentPathLength;

				keys.add( LongArrayBitVector.copy( path.subVector( 0, p ) ) );
				representations.add( path.copy() );
				assert Fast.length( path.length() ) <= logW;
				//System.err.println( "Entering " + path + " with key " + path.subVector( 0, p ) + ", signature " + ( h[ 0 ] & logWMask ) + " and length " + ( path.length() & wMask ) );
				
				values.add( ( h[ 0 ] & logLogWMask ) << logW | ( path.length() & logWMask ) );

				labelIntermediateTrie( node.right, path.append( 1, 1 ), representations, keys, values );

				path.length( path.length() - node.path.length() - 1 );
			}
		}

		
		/** Creates a partial compacted trie using given elements, bucket size and transformation strategy.
		 * 
		 * @param elements the elements among which the trie must be able to rank.
		 * @param bucketSize the size of a bucket.
		 * @param transformationStrategy a transformation strategy that must turn the elements in <code>elements</code> into a list of
		 * distinct, prefix-free, lexicographically increasing (in iteration order) bit vectors.
		 * @param tempDir a directory for the temporary files created during construction, or <code>null</code> for the default temporary directory. 
		 */
		
		public IntermediateTrie( final Iterable<? extends T> elements, final int bucketSize, final TransformationStrategy<? super T> transformationStrategy, final File tempDir ) {
			if ( ASSERTS ) {
				externalTestFunction = new Object2LongOpenHashMap<BitVector>();
				externalTestFunction.defaultReturnValue( -1 );
			}
			
			Iterator<? extends T> iterator = elements.iterator(); 
			delimiters = new ObjectOpenHashSet<BitVector>();
			
			if ( iterator.hasNext() ) {
				LongArrayBitVector prev = LongArrayBitVector.copy( transformationStrategy.toBitVector( iterator.next() ) );
				LongArrayBitVector prevDelimiter = LongArrayBitVector.getInstance();
				
				Node node, root = null;
				BitVector curr;
				int cmp, pos, prefix, count = 1;
				long maxLength = prev.length();
				
				while( iterator.hasNext() ) {
					// Check order
					curr = transformationStrategy.toBitVector( iterator.next() ).fast();
					cmp = prev.compareTo( curr );
					if ( cmp == 0 ) throw new IllegalArgumentException( "The input bit vectors are not distinct" );
					if ( cmp > 0 ) throw new IllegalArgumentException( "The input bit vectors are not lexicographically sorted" );
					if ( curr.longestCommonPrefixLength( prev ) == prev.length() ) throw new IllegalArgumentException( "The input bit vectors are not prefix-free" );

					if ( count % bucketSize == 0 ) {
						// Found delimiter. Insert into trie.
						if ( root == null ) {
							root = new Node( null, null, prev.copy() );
							delimiters.add( prev.copy() );
							prevDelimiter.replace( prev );
						}
						else {
							prefix = (int)prev.longestCommonPrefixLength( prevDelimiter );

							pos = 0;
							node = root;
							Node n = null;
							while( node != null ) {
								final long pathLength = node.path.length();
								if ( prefix < pathLength ) {
									n = new Node( node.left, node.right, node.path.copy( prefix + 1, pathLength ) );
									node.path.length( prefix );
									node.path.trim();
									node.left = n;
									node.right = new Node( null, null, prev.copy( pos + prefix + 1, prev.length() ) ); 
									break;
								}

								prefix -= pathLength + 1;
								pos += pathLength + 1;
								node = node.right;
								if ( ASSERTS ) assert node == null || prefix >= 0 : prefix + " <= " + 0;
							}

							if ( ASSERTS ) assert node != null;

							delimiters.add( prev.copy() );
							prevDelimiter.replace( prev );
						}
					}
					prev.replace( curr );
					maxLength = Math.max( maxLength, prev.length() );
					count++;
				}

				size = count;
				logLogW = Fast.ceilLog2( Fast.ceilLog2( maxLength ) );
				logW = 1 << logLogW;
				w = 1 << logW;
				logWMask = ( 1 << logW ) - 1;
				logLogWMask = ( 1 << logLogW ) - 1;
				assert logW + logLogW <= Long.SIZE;
				
				this.numElements = count;
				this.root = root;
				
				if ( DEBUG ) {
					System.err.println( "w: " + w );
					System.err.println( "Delimiters: " + delimiters );
					System.err.println( this );
				}
				
				
				if ( root != null ) {
					LOGGER.info( "Computing approximate structure..." );

					internalNodeRepresentations = new ObjectArrayList<LongArrayBitVector>();
					internalNodeSignatures = new LongArrayList();
					internalNodeKeys = new ObjectArrayList<LongArrayBitVector>();
					labelIntermediateTrie( root, LongArrayBitVector.getInstance(), internalNodeRepresentations, internalNodeKeys, internalNodeSignatures );

					if ( DEBUG ) {
						System.err.println( "Internal node representations: " + internalNodeRepresentations );
						System.err.println( "Internal node signatures: " + internalNodeSignatures );
					}
					
					LOGGER.info( "Computing function keys..." );

					externalValues = LongArrayBitVector.getInstance().asLongBigList( 1 );
					externalParentRepresentations = new IntArrayList( size );
					iterator = elements.iterator();

					// The stack of nodes visited the last time
					final Node stack[] = new Node[ (int)maxLength ];
					// The length of the path compacted in the trie up to the corresponding node, excluded
					final int[] len = new int[ (int)maxLength ];
					stack[ 0 ] = root;
					int depth = 0, behaviour;
					boolean first = true;
					BitVector currFromPos, path;
					LongArrayBitVector nodePath;

					while( iterator.hasNext() ) {
						curr = transformationStrategy.toBitVector( iterator.next() ).fast();
						if ( DEBUG ) System.err.println( "Analysing key " + curr + "..." );
						if ( ! first )  {
							// Adjust stack using lcp between present string and previous one
							prefix = (int)prev.longestCommonPrefixLength( curr );
							while( depth > 0 && len[ depth ] > prefix ) depth--;
						}
						else first = false;
						node = stack[ depth ];
						pos = len[ depth ];

						for(;;) {
							nodePath = node.path;
							currFromPos = curr.subVector( pos ); 
							prefix = (int)currFromPos.longestCommonPrefixLength( nodePath );

							//System.err.println( "prefix: " + prefix + " nodePath.length(): " + nodePath.length() + " node.isLeaf(): " + node.isLeaf() );
							
							if ( prefix < nodePath.length() || node.isLeaf() ) {
								// Exit. LEFT or RIGHT, depending on the bit at the end of the common prefix. The
								// path is the remaining path at the current position for external nodes, or a prefix of length
								// at most pathLength for internal nodes.
								behaviour = prefix < nodePath.length() && ! nodePath.getBoolean( prefix ) ? RIGHT : LEFT;
								path = curr;

								externalValues.add( behaviour );
								externalParentRepresentations.add( Math.max( 0, pos - 1 ) );
								
								if ( DEBUG ) {
									externalTestFunction.put(  path, behaviour );
									System.err.println( "Computed " + ( node.isLeaf() ? "leaf " : "" ) + "mapping <" + node.index + ", " + path + "> -> " + behaviour );
									System.err.println( externalTestFunction );
								}

								break;
							}

							pos += nodePath.length() + 1;
							if ( pos > curr.length() ) {
								assert false;
								break;
							}
							// System.err.println( curr.getBoolean( pos - 1 ) ? "Turning right" : "Turning left" );
							node = curr.getBoolean( pos - 1 ) ? node.right : node.left;
							// Update stack
							len[ ++depth ] = pos;
							stack[ depth ] = node;
						}

						prev.replace( curr );
					}

				}
			}
			else {
				// No elements.
				this.root = null;
				this.size = this.numElements = 0;
			}
		}

		private void recToString( final Node n, final MutableString printPrefix, final MutableString result, final MutableString path, final int level ) {
			if ( n == null ) return;
			
			result.append( printPrefix ).append( '(' ).append( level ).append( ')' );
			
			if ( n.path != null ) {
				path.append( n.path );
				result.append( " path:" ).append( n.path );
			}

			result.append( '\n' );
			
			path.append( '0' );
			recToString( n.left, printPrefix.append( '\t' ).append( "0 => " ), result, path, level + 1 );
			path.charAt( path.length() - 1, '1' ); 
			recToString( n.right, printPrefix.replace( printPrefix.length() - 5, printPrefix.length(), "1 => "), result, path, level + 1 );
			path.delete( path.length() - 1, path.length() ); 
			printPrefix.delete( printPrefix.length() - 6, printPrefix.length() );
			
			path.delete( (int)( path.length() - n.path.length() ), path.length() );
		}
		
		public String toString() {
			MutableString s = new MutableString();
			recToString( root, new MutableString(), s, new MutableString(), 0 );
			return s.toString();
		}

	}
	
	/** Creates a partial compacted trie using given elements, bucket size and transformation strategy.
	 * 
	 * @param elements the elements among which the trie must be able to rank.
	 * @param bucketSize the size of a bucket.
	 * @param transformationStrategy a transformation strategy that must turn the elements in <code>elements</code> into a list of
	 * distinct, lexicographically increasing (in iteration order) bit vectors.
	 */
	public RelativeTrieDistributor( final Iterable<? extends T> elements, final int bucketSize, final TransformationStrategy<? super T> transformationStrategy ) throws IOException {
		this( elements, bucketSize, transformationStrategy, null );
	}

	/** Creates a partial compacted trie using given elements, bucket size, transformation strategy, and temporary directory.
	 * 
	 * @param elements the elements among which the trie must be able to rank.
	 * @param bucketSize the size of a bucket.
	 * @param transformationStrategy a transformation strategy that must turn the elements in <code>elements</code> into a list of
	 * distinct, lexicographically increasing (in iteration order) bit vectors.
	 * @param tempDir the directory where temporary files will be created, or <code>for the default directory</code>.
	 */
	public RelativeTrieDistributor( final Iterable<? extends T> elements, final int bucketSize, final TransformationStrategy<? super T> transformationStrategy, final File tempDir ) throws IOException {
		this.transformationStrategy = transformationStrategy;
		final IntermediateTrie<T> intermediateTrie = new IntermediateTrie<T>( elements, bucketSize, transformationStrategy, tempDir );

		size = intermediateTrie.size;
		externalTestFunction = intermediateTrie.externalTestFunction;
		
		int p = 0;
		
		if ( DEBUG ) {
			System.err.println( "Internal node representations: " + intermediateTrie.internalNodeRepresentations );
			System.err.println( "Internal node keys: " + intermediateTrie.internalNodeKeys );
		}
		
		// ALERT
		//signatures = new MWHCFunction<BitVector>( intermediateTrie.internalNodeRepresentations, TransformationStrategies.identity(), intermediateTrie.internalNodeSignatures, intermediateTrie.w + intermediateTrie.logW );
		signatures = new MWHCFunction<BitVector>( intermediateTrie.internalNodeKeys, TransformationStrategies.identity(), intermediateTrie.internalNodeSignatures, Long.SIZE - 1 );
		behaviour = new MWHCFunction<BitVector>( TransformationStrategies.wrap( elements, transformationStrategy ), TransformationStrategies.identity(), intermediateTrie.externalValues, 1 );

		ObjectRBTreeSet<BitVector> rankerStrings = new ObjectRBTreeSet<BitVector>();
		for( LongArrayBitVector bv: intermediateTrie.internalNodeRepresentations ) {
			LongArrayBitVector t = bv.copy();
			t.add( false );
			rankerStrings.add( t );
			t = bv.copy();
			t.add( true );
			rankerStrings.add( t );
			t = bv.copy();
			t.add( true );
			for( p = t.size(); p-- != 0; ) 
				if ( ! t.getBoolean( p ) ) break;
				else t.set( p, false );
			assert p > -1;
			t.set( p );
			rankerStrings.add( t );
		}
		
		rankerStrings.addAll( intermediateTrie.delimiters );
		
		if ( DEBUG ) System.err.println( "Rankers: " + rankerStrings );
		
		LongArrayBitVector leavesBitVector = LongArrayBitVector.ofLength( rankerStrings.size() );
		p = 0;
		for( BitVector v : rankerStrings ) {
			if ( intermediateTrie.delimiters.contains( v ) ) leavesBitVector.set( p );
			p++;
		}
		leaves = new Rank9( leavesBitVector );
		if ( DEBUG ) System.err.println( "Rank bit vector: " + leavesBitVector );
		
		ranker = new LcpMonotoneMinimalPerfectHashFunction<BitVector>( rankerStrings, TransformationStrategies.prefixFree() );
		logWMask = intermediateTrie.logWMask;
		logW =  intermediateTrie.logW;
		logLogW =  intermediateTrie.logLogW;
		logLogWMask =  intermediateTrie.logLogWMask;
		w = intermediateTrie.w;
		numDelimiters = intermediateTrie.delimiters.size();
		
		// Compute errors to be corrected
		mistakes = new Object2LongOpenHashMap<BitVector>();
		mistakes.defaultReturnValue( -1 );
		
		if ( size > 0 ) {
			Iterator<BitVector>iterator = TransformationStrategies.wrap( elements.iterator(), transformationStrategy );
			int c = 0;
			while( iterator.hasNext() ) {
				BitVector curr = iterator.next();
				if ( DEBUG ) System.err.println( "Checking element number " + c + ( ( c + 1 ) % bucketSize == 0 ? " (bucket)" : "" ));
				if ( getNodeStringLength( curr ) != intermediateTrie.externalParentRepresentations.getInt( c ) ){
					if ( DEBUG ) System.err.println( "Error! " + getNodeStringLength( curr ) + " != " + intermediateTrie.externalParentRepresentations.getInt( c ) );
					mistakes.put( curr.copy(), intermediateTrie.externalParentRepresentations.getInt( c ) ); 
				} 
				
				c++;
							
			}
			LOGGER.info( "Errors: " + mistakes.size() + " (" + ( 100.0 * mistakes.size() / size ) + "%)" );
			if ( DEBUG ) System.err.println( mistakes );
		}

		if ( ASSERTS ) {
			if ( size > 0 ) {
				Iterator<BitVector>iterator = TransformationStrategies.wrap( elements.iterator(), transformationStrategy );
				int c = 0;
				while( iterator.hasNext() ) {
					BitVector curr = iterator.next();
					if ( DEBUG ) System.err.println( "Checking element number " + c + ( ( c + 1 ) % bucketSize == 0 ? " (bucket)" : "" ));
					long t = getLong( curr );
					assert t == c / bucketSize : "At " + c + ": " + t + " != " + c / bucketSize;
					c++;
				}		
			}
		}

	}
	
	
	private long getNodeStringLength( BitVector v ) {
		if ( DEBUG ) System.err.println( "getNodeStringLength(" + v + ")..." );
		long result = mistakes.getLong( v );
		if ( result != -1 ) return result;
		
		int i = logW - 1, j = -1, l = 0, r = (int)v.length();
		while( r - l > 1 ) {
			assert i > -1;
			if ( DDEBUG ) System.err.println( "[" + l + ".." + r + "]; i = " + i );
			// ALERT: slow!
			for( j = l + 1; j < r; j++ ) if ( j % ( 1 << i ) == 0 ) break;
			if ( j < w ) {

				long data = signatures.getLong( v.subVector( 0, j ) );
				
				if ( data < 1 ) r = j;
				else {
					long[] h = new long[ 3 ];
					int g = (int)( data & logWMask );

					if ( g > v.length() ) r = j;
					else {
						Hashes.jenkins( v.subVector( 0, g ), 0, h );

						if ( DEBUG ) System.err.println( "Recalling " + v.subVector( 0, j ) + " with signature " + ( h[ 0 ] & logLogW ) + " and length " + g );

						if ( ( data >>> logW ) == ( h[ 0 ] & logLogWMask ) && g >= j ) l = g;
						else r = j;
					}
				}
			}
				
			i--;
		}
		
		return l;
	}
	
	@SuppressWarnings("unchecked")
	public long getLong( final Object o ) {
		if ( size == 0 ) return 0;
		BitVector v = (BitVector)o;
		int b = (int)behaviour.getLong( o );
		long length = getNodeStringLength( v );
		
		if ( length == 0 ) return b == 0 ? 0 : numDelimiters;
		
		BitVector key = v.subVector( 0, length ).copy();
		if ( b == 0 ) {
			key.add( v.getBoolean( length ) );
			long pos = ranker.getLong( key );
			return leaves.rank( pos ); 
		}
		else {
			boolean bit = v.getBoolean( length );
			if ( bit ) {
				key.add( true );
				int p;
				for( p = key.size(); p-- != 0; ) 
					if ( ! key.getBoolean( p ) ) break;
					else key.set( p, false );
				assert p > -1;
				key.set( p );
				long pos = ranker.getLong( key );
				return leaves.rank( pos ); 
			}
			else {
				key.add( true );
				long pos = ranker.getLong( key );
				return leaves.rank( pos ); 
			}
		}
	}
	
	public long numBits() {
		long bitsForMistakes = 0;
		for( BitVector v: mistakes.keySet() ) bitsForMistakes += v.length() + logW;
		
		return behaviour.numBits() + signatures.numBits() + ranker.numBits() + leaves.numBits() + transformationStrategy.numBits() + bitsForMistakes; 
	}
	
	public boolean containsKey( Object o ) {
		return true;
	}

	public int size() {
		return size;
	}
}
