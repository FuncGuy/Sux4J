2.0.1

- Fixed bug in MinimalPerfetHashFunction that was causing exceptions
  when using more than a billion keys.

2.0

- General revamp, restructuring, improvements, new coherent names for
  classes. Most of the code has been rewritten or improved.

- New (partial) structures for balanced parentheses.

- New build system based on ChunkedHashStore that works for billions
  of keys.

- New structures for balanced parentheses (partially implemented).

- Faster Select9 operation: some broadword operations were implemented in
  a redundant way.

- SparseSelect/SparseRank would give an incorrect (or at least little
  useful) value for numBits() when using shared data.

- Fixed problem with SparseSelect: some methods inherited from
  EliasFanoMonotoneBigList were causing exceptions because the size of the
  SparseSelect is the number of bits, not the number of ones.

- New hollow trie implementation based on balanced parentheses.

- Fixed an old and severe bug in MinimalPerfectHashFunction, that
  was causing the generated functions not to be perfect.

1.0.4

- New progressive hash-computation methods that provide Jenkins hash
  in constant time on all prefixes (after a linear-time preprocessing).

1.0.3

- New TwoStepsMWHCFunction that records in s<r bits the most
  frequent values.

- Much improved relative trie implementation (uses two-steps MWHC functions, too).

- New TwoStepsLCPMonotoneMinimalPerfectHashFunction: it is slightly slow
  than an LCPMonotoneMinimalPerfectHashFunction, but consumes significantly
  less space thanks to a two-steps MWHC function.

1.0.2

- Fixed bug in SimpleSelectZero: under certain conditions, an error in
  counting zeroes was causing a out-of-bounds array access.

- Fixed gross bug in MWHCFunction. It wasn't working for bit width
  beyond 32.

- New data structure (RelativeTrieMonotoneMinimalPerfectHashFunction).

1.0.1

- Fixed wrong name of PaCo-trie-based monotone minimal
  perfect hash functions.

- Fixed small misbehaviours on very small key sets.

- New data structure (HollowTrieMonotoneMinimalPerfectHashFunction)
  that uses just 3.44 + 1.23 log log l bits per element.

1.0

- Fixed Jenkins hash so that it works with empty strings.

- Some class renamed.

- Rethought command-line argument parsing.

- Now monotone minimal perfect hashing classes.

- ShiftAddXorSignedStringMap moved to the DSI utilities.

- New classes for compressed lists based on the Elias-Fano
  representation.

0.3

- New rank/select structures.

- Restructuring following release of the DSI utilities: bit vectors
  implementations have been moved there.

- New signing classes that implement StringMap and make it possible to
  mimick the old MG4J SignedMinimalPerfectHash behaviour.

0.1

- First release.
