3.0.2

- Fixed minor inconsistencies in the values returned on empty functions
  (some implementations would actually throw an exception). Thanks to
  Valentin Tablan for reporting the problem.

3.0

- WARNING: This release has minor binary incompatibilities with previous
  releases, mainly due to the move from the interface
  it.unimi.dsi.util.LongBigList to the now standard
  it.unimi.dsi.fasutil.longs.LongBigList. It is part of a parallel release
  of fastutil, the DSI Utilities, Sux4J, MG4J, WebGraph, etc. that were
  all modified to fit the new interface, and that prepare the way for our
  "big" versions, that is, supporting >2^31 entries in arrays (simulated),
  elements in lists, terms, documents, nodes, etc. Please read our (short)
  "Moving Java to Big Data" document (JavaBig.pdf) for details.

- We now require Java 6.

- it.unimi.dsi.util.LongBigList is dead. Long live to
  it.unimi.dsi.fastutil.longs.LongBigList. We're sorry for the
  nuisance--adapting the code should be very easy (and we warned you
  anyway :).

- MWHCFunction has been re-engineered so that it will use very little
  space beside that actually required by the function. Previously, a
  number of large bit vectors were allocated at the same time, and they
  have been replaced by a judicious use of OfflineIterable. All classes
  that use MWHCFunction will benefit (at the expense of slightly increased
  disk usage and access).

- All classes should support big collections. They use the new Size64
  interface from fastutil. Implementations still support the old
  (deprecated) length() method for backward compatibility.

- New FileLinesBigList class.

- We now have a MurmurHash3 full implementation.

2.0.1

- Sux4J is now distributed under the GNU Lesser General Public
  License 3.

- Major rewriting of the hypergraph peeling code. Now we use less memory
  and we are definitely faster.

- MWHCFunction and MinimalPerfectHashFunction accept a temporary directory
  for the chunked hash store files.

- Improved ChunkedHashStore architecture that allow arbitrary values,
  so functions can be built without keeping values in memory.

- Fixed bug in MinimalPerfetHashFunction that was causing exceptions
  when using more than a billion keys (thanks to Wei Liu for reporting
  and fixing this bug).

- Fixed bug in some rank/select classes that was causing integer overflow
  errors when building structure over bit vectors with >2Gi bits.

- AbstractLongBitVector.equals() now uses getLong() on word boundaries.

- Fixed pernicious bug in Select9.

2.0

- General revamp, restructuring, improvements, new coherent names for
  classes. Most of the code has been rewritten or improved.

- New (partial) structures for balanced parentheses.

- New build system based on ChunkedHashStore that works for billions
  of keys.

- New structures for balanced parentheses (partially implemented).

- Faster Select9 operation: some broadword operations were implemented in
  a redundant way.

- SparseSelect/SparseRank would give an incorrect (or at least little
  useful) value for numBits() when using shared data.

- Fixed problem with SparseSelect: some methods inherited from
  EliasFanoMonotoneBigList were causing exceptions because the size of the
  SparseSelect is the number of bits, not the number of ones.

- New hollow trie implementation based on balanced parentheses.

- Fixed an old and severe bug in MinimalPerfectHashFunction, that
  was causing the generated functions not to be perfect.

1.0.4

- New progressive hash-computation methods that provide Jenkins hash
  in constant time on all prefixes (after a linear-time preprocessing).

1.0.3

- New TwoStepsMWHCFunction that records in s<r bits the most
  frequent values.

- Much improved relative trie implementation (uses two-steps MWHC functions, too).

- New TwoStepsLCPMonotoneMinimalPerfectHashFunction: it is slightly slow
  than an LCPMonotoneMinimalPerfectHashFunction, but consumes significantly
  less space thanks to a two-steps MWHC function.

1.0.2

- Fixed bug in SimpleSelectZero: under certain conditions, an error in
  counting zeroes was causing a out-of-bounds array access.

- Fixed gross bug in MWHCFunction. It wasn't working for bit width
  beyond 32.

- New data structure (RelativeTrieMonotoneMinimalPerfectHashFunction).

1.0.1

- Fixed wrong name of PaCo-trie-based monotone minimal
  perfect hash functions.

- Fixed small misbehaviours on very small key sets.

- New data structure (HollowTrieMonotoneMinimalPerfectHashFunction)
  that uses just 3.44 + 1.23 log log l bits per element.

1.0

- Fixed Jenkins hash so that it works with empty strings.

- Some class renamed.

- Rethought command-line argument parsing.

- Now monotone minimal perfect hashing classes.

- ShiftAddXorSignedStringMap moved to the DSI utilities.

- New classes for compressed lists based on the Elias-Fano
  representation.

0.3

- New rank/select structures.

- Restructuring following release of the DSI utilities: bit vectors
  implementations have been moved there.

- New signing classes that implement StringMap and make it possible to
  mimick the old MG4J SignedMinimalPerfectHash behaviour.

0.1

- First release.
